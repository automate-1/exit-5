name: Manage Submodules

on:
  workflow_dispatch:
  push:
    branches:
      - main
    inputs:
      repoPath:
        description: 'Path to the repository'
        required: true
        default: 'exit-5'
      submoduleUrl:
        description: 'URL of the submodule to add'
        required: false
        default: 'https://github.com/automate-1/exit-3.git'
      submoduleCommit:
        description: 'Commit hash for the submodule (required to checkout specific version)'
        required: false
        default: '0e6de18'
      action:
        description: 'Choose an action from 1 to 6'
        required: true
        default: '2'
      submodulePath:
        description: 'Path of the submodule for action (required for specific actions)'
        required: false
        default: 'exit-3'

jobs:
  manage-submodules:
    runs-on: windows-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          submodules: true  # Fetch submodules if they exist

      - name: Manage submodules
        shell: pwsh
        run: |
          # Set variables from workflow inputs
          $repoPath = "${{ github.event.inputs.repoPath }}"
          $submoduleUrl = "${{ github.event.inputs.submoduleUrl }}"
          $action = "${{ github.event.inputs.action }}"
          $submodulePath = "${{ github.event.inputs.submodulePath }}"
          $submoduleCommit = "${{ github.event.inputs.submoduleCommit }}"

          # Debugging the variables
          Write-Output "Repo Path: $repoPath"
          Write-Output "Submodule URL: $submoduleUrl"
          Write-Output "Action: $action"
          Write-Output "Submodule Path: $submodulePath"
          Write-Output "Submodule Commit: $submoduleCommit"

          # Navigate to the target repository (Ensure the repoPath is correct)
          Set-Location -Path $repoPath
          Write-Output "Changed directory to $repoPath"

          # Add submodule if URL is provided
          if ($submoduleUrl -ne "") {
              # Check if submodule already exists to avoid errors
              $submoduleExists = git submodule status $submodulePath
              if ($submoduleExists) {
                  Write-Output "Submodule at $submodulePath already exists."
              } else {
                  git submodule add $submoduleUrl $submodulePath
                  git submodule update --init --recursive
                  git add .
                  git commit -m "Added submodule: $submoduleUrl"
                  git push origin main
                  Write-Output "Added submodule at $submoduleUrl"
              }
          }

          # Checkout a specific commit of the submodule if provided
          if ($submoduleCommit -ne "") {
              Set-Location -Path $submodulePath
              git checkout $submoduleCommit
              git submodule update --recursive
              Write-Output "Checked out submodule at commit: $submoduleCommit"

              Set-Location -Path $repoPath
          }

          # Perform action based on input
          switch ($action) {
              "1" {
                  git submodule update --init --recursive $submodulePath
                  Write-Output "$submodulePath submodule has been initialized."
              }
              "2" {
                  # Update submodule
                  git submodule update --remote $submodulePath
                  $current_commit = (git submodule status $submodulePath | ForEach-Object { $_.Split(' ')[0] })
                  Write-Output "Submodule $submodulePath updated to commit: $current_commit"
                  Write-Output "Current commit: $current_commit"
              }
              "3" {
                  git add $submodulePath
                  git commit -m "Updated specific submodule: $submodulePath"
                  git push origin main
                  Write-Output "Updates for $submodulePath submodule have been committed and pushed."
              }
              "4" {
                  git submodule sync --recursive $submodulePath
                  Write-Output "$submodulePath submodule URL has been synced."
              }
              "5" {
                  # Remove submodule and update .gitmodules in a single commit
                  git submodule deinit -f -- $submodulePath
                  git rm -r --cached $submodulePath
                  git config -f .gitmodules --remove-section submodule.$submodulePath
                  git add .gitmodules
                  git commit -m "Removed submodule at $submodulePath and updated .gitmodules"
                  git push origin main
                  Write-Output "$submodulePath submodule has been removed."
              }
              "6" {
                  git submodule add $submoduleUrl $submodulePath
                  git commit -m "Re-added submodule at $submodulePath"
                  git push origin main
                  Write-Output "Submodule added at $submodulePath."
              }
              default {
                 Write-Output "Action selected: $action"
              }
          }

    
            
