name: Manage Submodules

on:
  workflow_dispatch:
    inputs:
      repoPath:
        description: 'Path to the repository'
        required: true
        default: 'https://github.com/automate-1/exit-5.git'
      submoduleUrl:
        description: 'URL of the submodule to add'
        required: false
        default: 'https://github.com/automate-1/exit-3.git'
      action:
        description: 'Action to perform (1-6)'
        required: true
        default: '5'  # Default to the removal action
      submodulePath:
        description: 'Path to the submodule (required for specific actions)'
        required: false
        default: 'exit-3'  # The submodule path
      commitHash:
        description: 'Commit hash to update submodule to (for action 2)'
        required: false
        default: '0e6de18'  # Specific commit for action 2, if needed

  push:
    branches:
      - main

jobs:
  manage-submodules:
    runs-on: windows-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          submodules: true  # Fetch submodules if they exist
          persist-credentials: true  # Ensure credentials are retained for pushing changes

      - name: Configure Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: Manage submodules
        shell: pwsh
        run: |
          # Set variables from workflow inputs
          $repoPath = "${{ github.event.inputs.repoPath }}"
          $submoduleUrl = "${{ github.event.inputs.submoduleUrl }}"
          $action = "${{ github.event.inputs.action }}"
          $submodulePath = "${{ github.event.inputs.submodulePath }}"
          $commitHash = "${{ github.event.inputs.commitHash }}"

          # Navigate to the target repository
          Set-Location -Path $repoPath
          Write-Output "Changed directory to $repoPath"

          # Add submodule if URL is provided and action is to add
          if ($submoduleUrl -ne "" -and $action -eq "6") {
              git submodule add $submoduleUrl $submodulePath
              git submodule update --init --recursive
              git add .gitmodules $submodulePath
              git commit -m "Added submodule: $submoduleUrl"
              git push origin main
              Write-Output "Added submodule at $submoduleUrl"
          }

          # Perform action based on input
          switch ($action) {
              "1" {
                  git submodule update --init --recursive $submodulePath
                  Write-Output "$submodulePath submodule has been initialized."
              }
              "2" {
                  if ($commitHash -ne "") {
                      Set-Location -Path $submodulePath
                      git fetch
                      git checkout $commitHash
                      Set-Location -Path $repoPath
                      Write-Output "$submodulePath submodule updated to specific commit $commitHash."
                  }
                  else {
                      git submodule update --remote $submodulePath
                      Write-Output "$submodulePath submodule updated to the latest commit."
                  }
              }
              "3" {
                  git add $submodulePath
                  git commit -m "Updated specific submodule: $submodulePath"
                  git push origin main
                  Write-Output "Updates for $submodulePath submodule have been committed and pushed."
              }
              "4" {
                  git submodule sync --recursive $submodulePath
                  Write-Output "$submodulePath submodule URL has been synced."
              }
              "5" {
                  # Deinitialize and remove submodule
                  git submodule deinit -f -- $submodulePath
                  Write-Output "Deinitialized $submodulePath submodule."

                  # Force remove the submodule from the index
                  git rm -f --cached $submodulePath
                  Write-Output "Removed $submodulePath from the index."

                  # Delete the submodule directory from the working tree
                  Remove-Item -Recurse -Force $submodulePath

                  # Ensure .gitmodules is updated by removing the submodule entry
                  $gitmodulesPath = ".gitmodules"
                  $gitmodulesContent = Get-Content $gitmodulesPath
                  $updatedContent = $gitmodulesContent | Where-Object { $_ -notmatch "^\[submodule `"$submodulePath`"\]" }
                  $updatedContent | Set-Content $gitmodulesPath

                  # Stage .gitmodules for commit
                  git add .gitmodules
                  Write-Output "Updated .gitmodules to remove the submodule entry."

                  # Commit the removal and push changes
                  git commit -m "Removed submodule at $submodulePath"
                  git push origin main
                  Write-Output "$submodulePath submodule has been fully removed."
              }
              "6" {
                  git submodule add $submoduleUrl $submodulePath
                  git commit -m "Re-added submodule at $submodulePath"
                  git push origin main
                  Write-Output "Submodule added at $submodulePath."
              }
              default {
                  Write-Output "Invalid action. Please select a valid number between 1 and 6."
              }
          }
